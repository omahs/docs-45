"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[3487],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=o,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||i;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9716:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={},a="ADR 0015: Randomized Paratime Proposer Selection",s={unversionedId:"adrs/0015-vrf-per-block-entropy",id:"adrs/0015-vrf-per-block-entropy",title:"ADR 0015: Randomized Paratime Proposer Selection",description:"Component",source:"@site/docs/adrs/0015-vrf-per-block-entropy.md",sourceDirName:"adrs",slug:"/adrs/0015-vrf-per-block-entropy",permalink:"/adrs/0015-vrf-per-block-entropy",draft:!1,editUrl:"https://github.com/oasisprotocol/adrs/edit/main/0015-vrf-per-block-entropy.md",tags:[],version:"current",lastUpdatedAt:1674490900,formattedLastUpdatedAt:"Jan 23, 2023",frontMatter:{},sidebar:"adrs",previous:{title:"ADR 0014: Signing Runtime Transactions with Hardware Wallet",permalink:"/adrs/0014-runtime-signing-tx-with-hardware-wallet"},next:{title:"ADR 0016: Consensus Parameters Change Proposal",permalink:"/adrs/0016-consensus-parameters-change-proposal"}},l={},p=[{value:"Component",id:"component",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Vote extension",id:"vote-extension",level:3},{value:"Proposer selection",id:"proposer-selection",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"adr-0015-randomized-paratime-proposer-selection"},"ADR 0015: Randomized Paratime Proposer Selection"),(0,o.kt)("h2",{id:"component"},"Component"),(0,o.kt)("p",null,"Oasis Core"),(0,o.kt)("h2",{id:"changelog"},"Changelog"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"2022-09-14: Initial import")),(0,o.kt)("h2",{id:"status"},"Status"),(0,o.kt)("p",null,"Proposed"),(0,o.kt)("h2",{id:"context"},"Context"),(0,o.kt)("p",null,"The paratime block proposer currently is selected via a round-robin algorithm,\nand it is trivial to determine the block proposer well in advance.  This ADR\nproposes having a mechanism for generating per-consensus block entropy via\nECVRF",(0,o.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/draft-irtf-cfrg-vrf/"},"1"),", and randomizing the Paratime block proposer."),(0,o.kt)("h2",{id:"decision"},"Decision"),(0,o.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"Let each node have a distinct long-term VRF keypair, that is published as\npart of the node's descriptor (as per ADR 0010)."),(0,o.kt)("p",null,"Let Tendermint actually implement ",(0,o.kt)("inlineCode",{parentName:"p"},"ExtendVote"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"VerifyVoteExtension")," as\nper certain versions of the ABCI++ spec",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tendermint/tendermint/blob/main/docs/rfc/rfc-013-abci%2B%2B.md"},"2"),".  Note that it appears that this\nwill NOT be in Tendermint 0.37.x, but instead is scheduled for a later\nrelease."),(0,o.kt)("h3",{id:"vote-extension"},"Vote extension"),(0,o.kt)("p",null,"ABCI++ introduces a notion of an application defined ",(0,o.kt)("inlineCode",{parentName:"p"},"vote_extension")," blob\nthat is set by the tendermint block proposer, and verified by all of the\nvoters.  Oasis will use the following datastructure, serialized to canonical\nCBOR, and signed with the node's consensus signing key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type OasisVoteExtension struct {\n  // Pi is the proposer\'s VRF proof for the current block height.\n  Pi []byte `json:"pi"`\n}\n')),(0,o.kt)("p",null,"For the genesis block +1 (No previous beta), let the VRF alpha_string input\nbe derived as:"),(0,o.kt)("p",null,"  ",(0,o.kt)("inlineCode",{parentName:"p"},'TupleHash256((chain_context, I2OSP(height,8)), 256, "oasis-core:tm-vrf/alpha")')),(0,o.kt)("p",null,"For subsequent blocks, let the VRF alpha_string input be derived as:"),(0,o.kt)("p",null,"  ",(0,o.kt)("inlineCode",{parentName:"p"},'TupleHash256((chain_context, I2OSP(height,8), prev_beta), 256, "oasis-core:tm-vrf/alpha")'),"\nwhere prev_beta is the beta_string output from the previous height's ECVRF\nproof."),(0,o.kt)("p",null,"Blocks must have a valid ",(0,o.kt)("inlineCode",{parentName:"p"},"OasisVoteExtension")," blob to be considered valid,\nand nodes MUST use the same ECVRF key for the entire epoch (key changes\nmid-epoch are ignored till the epoch transition) to prevent the proposer\nfrom regenerating the ECVRF key repeatedly to fish for entropy output."),(0,o.kt)("h3",{id:"proposer-selection"},"Proposer selection"),(0,o.kt)("p",null,"Instead of round-robin through the per-epoch list of primary (non-backup)\nworkers, the index for the node can be selected as thus:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'seed = TupleHash256((chain_context, I2OSP(height,8), runtime_id, pi), 256, "oasis-core:tm-vrf/paratime")\ndrbg = drbg.New(crypto.SHA512, seed, nil, "BlockProposer")\nrng = rand.New(mathrand.New(drbg))\n\nl := len(primary_nodes)\nprimary_index = int(rng.Int63n(l))\n')),(0,o.kt)("h2",{id:"consequences"},"Consequences"),(0,o.kt)("h3",{id:"positive"},"Positive"),(0,o.kt)("p",null,"The paratime block proposer(s) will be randomized."),(0,o.kt)("p",null,"This can be done without having to patch tendermint."),(0,o.kt)("p",null,"In theory, the system will have a way to generate entropy at the consensus\nlayer again."),(0,o.kt)("h3",{id:"negative"},"Negative"),(0,o.kt)("p",null,"The tendermint block proposer still will be selected via a round robin\nalgorithm.  Note that Oasis does not have smart contracts at that level so\nthe impact of being able to predict the block proposer there is less\nsignificant than other systems."),(0,o.kt)("p",null,"People may be tempted to abuse this entropy for other things (eg: inside\nparatimes), which would be incorrect (block proposer can cheat)."),(0,o.kt)("p",null,"This relies on interfaces exposed by ABCI++, which appear to no longer\nbe part of 0.37.x, so it is unknown when this will be possible to implement."),(0,o.kt)("h3",{id:"neutral"},"Neutral"),(0,o.kt)("h2",{id:"references"},"References"))}d.isMDXComponent=!0}}]);