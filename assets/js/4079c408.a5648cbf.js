"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[9439],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,h=m["".concat(l,".").concat(c)]||m[c]||d[c]||o;return n?i.createElement(h,a(a({ref:t},u),{},{components:n})):i.createElement(h,a({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7685:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));const o={},a="ADR 0013: Runtime Upgrade Improvements",s={unversionedId:"adrs/0013-runtime-upgrades",id:"adrs/0013-runtime-upgrades",title:"ADR 0013: Runtime Upgrade Improvements",description:"Component",source:"@site/docs/adrs/0013-runtime-upgrades.md",sourceDirName:"adrs",slug:"/adrs/0013-runtime-upgrades",permalink:"/adrs/0013-runtime-upgrades",draft:!1,editUrl:"https://github.com/oasisprotocol/adrs/edit/main/0013-runtime-upgrades.md",tags:[],version:"current",lastUpdatedAt:1674490900,formattedLastUpdatedAt:"Jan 23, 2023",frontMatter:{},sidebar:"adrs",previous:{title:"ADR 0012: Runtime Message Results",permalink:"/adrs/0012-runtime-message-results"},next:{title:"ADR 0014: Signing Runtime Transactions with Hardware Wallet",permalink:"/adrs/0014-runtime-signing-tx-with-hardware-wallet"}},l={},p=[{value:"Component",id:"component",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"adr-0013-runtime-upgrade-improvements"},"ADR 0013: Runtime Upgrade Improvements"),(0,r.kt)("h2",{id:"component"},"Component"),(0,r.kt)("p",null,"Oasis Core"),(0,r.kt)("h2",{id:"changelog"},"Changelog"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"2022-01-25: Initial version")),(0,r.kt)("h2",{id:"status"},"Status"),(0,r.kt)("p",null,"Accepted"),(0,r.kt)("h2",{id:"context"},"Context"),(0,r.kt)("p",null,"Currently major runtime updates incur at least one epoch worth of downtime\nfor the transition period.  This is suboptimal, and can be improved to allow\nseamless runtime updates, with some changes to the runtime descriptor and\nscheduler behavior."),(0,r.kt)("h2",{id:"decision"},"Decision"),(0,r.kt)("p",null,"Implement support for seamless breaking runtime upgrades."),(0,r.kt)("h2",{id:"implementation"},"Implementation"),(0,r.kt)("p",null,"Runtime descriptor related changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-golang"},'// Runtime represents a runtime.\ntype Runtime struct { // nolint: maligned\n  // Deployments specifies the runtime deployments (versions).\n  Deployments []*VersionInfo `json:"deployments"`\n\n  // Version field is relocated to inside the VersionInfo structure.\n\n  // Other unchanged fields omitted for brevity.\n}\n\n// VersionInfo is the per-runtime version information.\ntype VersionInfo struct {\n  // Version of the runtime.\n  Version version.Version `json:"version"`\n\n  // ValidFrom stores the epoch at which, this version is valid.\n  ValidFrom beacon.EpochTime `json:"valid_from"`\n\n  // TEE is the enclave version information, in an enclave provider specific\n  // format if any.\n  TEE []byte `json:"tee,omitempty"`\n}\n')),(0,r.kt)("p",null,"The intended workflow here is to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Deploy runtimes with the initial Deployment populated.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Update the runtime version via the deployment of a new version\nof the descriptor with an additional version info entry.\nSufficient nodes must upgrade their runtime binary and\nconfiguration by the ",(0,r.kt)("inlineCode",{parentName:"p"},"ValidFrom"),' epoch or the runtime will fail\nto be scheduled (no special handling is done, this is the existing\n"insufficient nodes" condition).')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Aborting or altering pending updates via the deployment of a new version\nof the descriptor with the removed/ammended not-yet-valid ",(0,r.kt)("inlineCode",{parentName:"p"},"Deployments"),"\nis possible in this design, but perhaps should be forbidden.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Altering exisiting ",(0,r.kt)("inlineCode",{parentName:"p"},"Deployments")," entries is strictly forbidden,\nexcept the removal of superceded descriptors.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Deploying descriptors with ",(0,r.kt)("inlineCode",{parentName:"p"},"Deployments")," that will never be valid\n(as in one that is superceded by a newer version) is strictly\nforbidden."))),(0,r.kt)("p",null,"The existing node descriptor is a flat vector of ",(0,r.kt)("inlineCode",{parentName:"p"},"Runtime")," entries\ncontaining the runtime ID, version, and TEE information, so no changes\nare required."),(0,r.kt)("p",null,"On transition to an epoch where a new version takes effect, the consensus\nlayer MAY prune the descriptor's ",(0,r.kt)("inlineCode",{parentName:"p"},"Deployments")," field of superceded versions."),(0,r.kt)("p",null,"The only scheduler and worker side changes are to incorporate the runtime\nversion into scheduling, and to pick the correct deployed version of the\nruntime to use, both on a once-per-epoch-per-runtime basis."),(0,r.kt)("h2",{id:"consequences"},"Consequences"),(0,r.kt)("h3",{id:"positive"},"Positive"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Seamless runtime upgrades will be possible.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The code changes required are relatively minimal, and this is likely\nthe simplest possible solution that will work."))),(0,r.kt)("h3",{id:"negative"},"Negative"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It may be overly simplistic.")))}d.isMDXComponent=!0}}]);