"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[2625],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>h});var t=n(7294);function s(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){s(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,s=function(e,a){if(null==e)return{};var n,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=t.createContext({}),p=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},d=function(e){var a=p(e.components);return t.createElement(i.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=s,m=u["".concat(i,".").concat(h)]||u[h]||c[h]||o;return n?t.createElement(m,r(r({ref:a},d),{},{components:n})):t.createElement(m,r({ref:a},d))}));function h(e,a){var n=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l.mdxType="string"==typeof e?e:s,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6182:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var t=n(7462),s=(n(7294),n(3905));const o={},r="ADR 0016: Consensus Parameters Change Proposal",l={unversionedId:"adrs/0016-consensus-parameters-change-proposal",id:"adrs/0016-consensus-parameters-change-proposal",title:"ADR 0016: Consensus Parameters Change Proposal",description:"Component",source:"@site/docs/adrs/0016-consensus-parameters-change-proposal.md",sourceDirName:"adrs",slug:"/adrs/0016-consensus-parameters-change-proposal",permalink:"/adrs/0016-consensus-parameters-change-proposal",draft:!1,editUrl:"https://github.com/oasisprotocol/adrs/edit/main/0016-consensus-parameters-change-proposal.md",tags:[],version:"current",lastUpdatedAt:1674490900,formattedLastUpdatedAt:"Jan 23, 2023",frontMatter:{},sidebar:"adrs",previous:{title:"ADR 0015: Randomized Paratime Proposer Selection",permalink:"/adrs/0015-vrf-per-block-entropy"},next:{title:"ADR 0017: ParaTime Application Standard Proposal Process",permalink:"/adrs/0017-app-standards"}},i={},p=[{value:"Component",id:"component",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Implementation",id:"implementation",level:2},{value:"New proposal",id:"new-proposal",level:3},{value:"Parameter changes",id:"parameter-changes",level:3},{value:"Submission",id:"submission",level:3},{value:"Execution",id:"execution",level:3},{value:"How to enable the new proposal",id:"how-to-enable-the-new-proposal",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2}],d={toc:p};function c(e){let{components:a,...n}=e;return(0,s.kt)("wrapper",(0,t.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"adr-0016-consensus-parameters-change-proposal"},"ADR 0016: Consensus Parameters Change Proposal"),(0,s.kt)("h2",{id:"component"},"Component"),(0,s.kt)("p",null,"Oasis Core"),(0,s.kt)("h2",{id:"changelog"},"Changelog"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"2022-09-15: Initial version")),(0,s.kt)("h2",{id:"status"},"Status"),(0,s.kt)("p",null,"Proposed"),(0,s.kt)("h2",{id:"context"},"Context"),(0,s.kt)("p",null,"Currently consensus parameters can only be changed with an upgrade governance\nproposal which is effective but not very efficient. Upgrades require downtime\nduring which binaries need to be updated, nodes restarted and synced, consensus\nnetwork version has to be increased etc. We would like to avoid this cumbersome\nprocedure and change the parameters of a consensus module as fast and as simple\nas possible without affecting the performance of the consensus layer."),(0,s.kt)("h2",{id:"decision"},"Decision"),(0,s.kt)("p",null,"Implement governance proposal which changes consensus parameters only."),(0,s.kt)("h2",{id:"implementation"},"Implementation"),(0,s.kt)("h3",{id:"new-proposal"},"New proposal"),(0,s.kt)("p",null,"A new type of governance proposal named ",(0,s.kt)("inlineCode",{parentName:"p"},"ChangeParametersProposal")," should be\nadded to the consensus layer. The proposal should contain two non-empty fields:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"the name of the consensus ",(0,s.kt)("inlineCode",{parentName:"p"},"Module")," the changes should be applied to, and,")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"a CBOR-encoded document ",(0,s.kt)("inlineCode",{parentName:"p"},"Changes")," describing parameter changes."))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-golang"},'// ChangeParametersProposal is a consensus parameters change proposal.\ntype ChangeParametersProposal struct {\n  // Module identifies the consensus backend module to which changes should be\n  // applied.\n  Module string `json:"module"`\n  // Changes are consensus parameter changes that should be applied to\n  // the module.\n  Changes cbor.RawMessage `json:"changes"`\n}\n')),(0,s.kt)("p",null,"Both fields should be validated before proposal submission to avoid having\ninvalid proposals with empty fields. A more in-depth validation should be done\nby consensus modules during submission to ensure that the encoded ",(0,s.kt)("inlineCode",{parentName:"p"},"Changes")," are\ncomplete and well-formed and that there is exactly one module to which changes\nwill be applied."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-golang"},"// ValidateBasic performs a basic validation on the change parameters proposal.\nfunc (p *ChangeParametersProposal) ValidateBasic() error {\n  // Validate that both fields are set.\n}\n")),(0,s.kt)("p",null,"The new proposal should be added to the ",(0,s.kt)("inlineCode",{parentName:"p"},"ProposalContent"),". The extension should\nstill allow only one proposal at a time, so we must not forget to update\nthe code responsible for validation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-golang"},'type ProposalContent struct {\n  ...\n  ChangeParameters *ChangeParametersProposal `json:"change_parameters,omitempty"`\n}\n')),(0,s.kt)("h3",{id:"parameter-changes"},"Parameter changes"),(0,s.kt)("p",null,"Each consensus module should carefully scope which parameters are allowed to\nbe changed. For example, a governance module could allow changing only the gas\ncosts and the voting period, while the staking module would allow changing\nall parameters."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-golang"},'// ConsensusParameterChanges define allowed governance consensus parameter\n// changes.\ntype ConsensusParameterChanges struct {\n  // GasCosts are the new gas costs.\n  GasCosts *transaction.Costs `json:"gas_costs,omitempty"`\n  // VotingPeriod is the new voting period.\n  VotingPeriod *beacon.EpochTime `json:"voting_period,omitempty"`\n}\n')),(0,s.kt)("p",null,"To prevent invalid proposals being submitted, ",(0,s.kt)("inlineCode",{parentName:"p"},"ConsensusParameterChanges"),"\nshould expose validation method which can be used to check if changes are\nvalid (e.g. changes are not empty, parameters have the right ranges)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-golang"},"// SanityCheck performs a sanity check on the consensus parameters changes.\nfunc (c *ConsensusParameterChanges) SanityCheck() error {\n  // Validate changes.\n}\n")),(0,s.kt)("p",null,"How changes are executed is up to the module implementation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-golang"},"// Apply applies changes to the given consensus parameters.\nfunc (c *ConsensusParameterChanges) Apply(params *ConsensusParameters) error {\n   // Apply changes.\n}\n")),(0,s.kt)("h3",{id:"submission"},"Submission"),(0,s.kt)("p",null,"When a new ",(0,s.kt)("inlineCode",{parentName:"p"},"ChangeParametersProposal")," is submitted a basic validation is\nperformed first which checks whether the ",(0,s.kt)("inlineCode",{parentName:"p"},"Module")," name and ",(0,s.kt)("inlineCode",{parentName:"p"},"Changes")," are set\ncorrectly. Afterwards, a validation message is broadcasted to all modules\nrequesting them to validate the proposal. Only the module for which ",(0,s.kt)("inlineCode",{parentName:"p"},"Changes"),"\nare intended should act and reply to the message, other modules should silently\nignore it. In case no module replies, the proposal is immediately rejected\nas not being supported."),(0,s.kt)("p",null,"The module should carefully examine the proposal, check whether the proposal\nis well-formed, ",(0,s.kt)("inlineCode",{parentName:"p"},"Changes")," are not empty and deserialize correctly to the\nexpected format, deserialized parameter changes are valid etc. If all checks\nsucceed, the module should respond with a confirmation message. Otherwise,\nan error describing why proposal is invalid should be returned as a response."),(0,s.kt)("p",null,"Note: Validation at this stage cannot always be complete as valid parameter\nvalues are not necessary independent of each other. If multiple proposals are\nbeing executed at the same time, the resulting parameters can be invalid even\nthough validation of each proposal passed. Therefore, another validation\nis required when the proposal is about to be executed."),(0,s.kt)("h3",{id:"execution"},"Execution"),(0,s.kt)("p",null,"If ",(0,s.kt)("inlineCode",{parentName:"p"},"ChangeParametersProposal")," closes as accepted (vote passed), the governance\nmodule will execute the proposal by broadcasting a message containing\nthe proposal to all modules. Notification can be done using the same message\ndispatch mechanism as in the submission phase. Once messages are delivered,\nonly one module will act and try to apply ",(0,s.kt)("inlineCode",{parentName:"p"},"Changes"),"."),(0,s.kt)("p",null,"That module should first fetch current consensus parameters, then apply\nproposed ",(0,s.kt)("inlineCode",{parentName:"p"},"Changes")," and finally validate the result. Validation of parameters\nis necessary as mentioned in the submission phase. If validation succeeds,\nthe consensus parameters are updated and proposal is marked as passed.\nOtherwise, the proposal is marked as failed and the proposed parameter\nchanges are discarded."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-golang"},"// SanityCheck performs a sanity check on the consensus parameters.\nfunc (p *ConsensusParameters) SanityCheck() error {\n   // Validate parameters.\n}\n")),(0,s.kt)("h3",{id:"how-to-enable-the-new-proposal"},"How to enable the new proposal"),(0,s.kt)("p",null,"Adding a new proposal type is a consensus breaking change. To make it\nnon-breaking we introduce a new governance consensus parameter which disables\nthe new type by default and can be enabled via governance. When disabled,\nthe governance module will treat the new proposal type as invalid, thus not\nviolating the consensus."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-golang"},'type ConsensusParameters struct {\n  ...\n  // EnableChangeParametersProposal is true iff change parameters proposals are\n  // allowed.\n  EnableChangeParametersProposal bool `json:"enable_change_parameters_proposal,omitempty"`\n}\n')),(0,s.kt)("h2",{id:"consequences"},"Consequences"),(0,s.kt)("h3",{id:"positive"},"Positive"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Agile and zero-downtime consensus parameter changes.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Separation of consensus parameter changes and consensus upgrades."))),(0,s.kt)("h3",{id:"negative"},"Negative"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Introduction of a new governance consensus parameter which enables new\nproposals in the upgrade handler. New parameters can always be considered\nas a minor disadvantage as they usually increase the complexity of the code.")),(0,s.kt)("h3",{id:"neutral"},"Neutral"),(0,s.kt)("h2",{id:"references"},"References"),(0,s.kt)("p",null,"No references."))}c.isMDXComponent=!0}}]);