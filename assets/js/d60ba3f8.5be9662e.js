"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[97],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>u});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),s=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=s(r),u=n,y=m["".concat(l,".").concat(u)]||m[u]||c[u]||i;return r?a.createElement(y,o(o({ref:t},d),{},{components:r})):a.createElement(y,o({ref:t},d))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:n,o[1]=p;for(var s=2;s<i;s++)o[s]=r[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4561:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=r(7462),n=(r(7294),r(3905));const i={description:"Additional Sapphire precompiles for encryption and confidentiality"},o="Precompiles",p={unversionedId:"dapp/sapphire/precompiles",id:"dapp/sapphire/precompiles",title:"Precompiles",description:"Additional Sapphire precompiles for encryption and confidentiality",source:"@site/docs/dapp/sapphire/precompiles.md",sourceDirName:"dapp/sapphire",slug:"/dapp/sapphire/precompiles",permalink:"/dapp/sapphire/precompiles",draft:!1,editUrl:"https://github.com/oasisprotocol/docs/edit/main/docs/dapp/sapphire/precompiles.md",tags:[],version:"current",lastUpdatedAt:1675933402,formattedLastUpdatedAt:"Feb 9, 2023",frontMatter:{description:"Additional Sapphire precompiles for encryption and confidentiality"},sidebar:"developers",previous:{title:"Browser Support",permalink:"/dapp/sapphire/browser"},next:{title:"Cipher ParaTime",permalink:"/dapp/cipher/"}},l={},s=[{value:"X25519 Key Derivation",id:"x25519-key-derivation",level:2},{value:"Overview",id:"overview",level:3},{value:"Example",id:"example",level:3},{value:"Deoxys-II Encryption",id:"deoxys-ii-encryption",level:2},{value:"Overview",id:"overview-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Library",id:"library",level:2}],d={toc:s};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"precompiles"},"Precompiles"),(0,n.kt)("p",null,"In addition to the standard EVM precompiles, Sapphire provides three\nfurther cryptography-related ones to make some operations easier and\ncheaper to perform: x25519 key derivation, and Deoxys-II-based encryption\nand decryption."),(0,n.kt)("p",null,"These can be called in the same way as other precompiles by dispatching\ncalls to specific well-known contract addresses, as described below.\nInput parameters should be packed into a contiguous memory region, with\neach chunk of data padded to 32 bytes as usual."),(0,n.kt)("h2",{id:"x25519-key-derivation"},"X25519 Key Derivation"),(0,n.kt)("h3",{id:"overview"},"Overview"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Precompile address: ",(0,n.kt)("inlineCode",{parentName:"li"},"0x0100000000000000000000000000000000000002")),(0,n.kt)("li",{parentName:"ul"},"Input format: ",(0,n.kt)("inlineCode",{parentName:"li"},"bytes32 public_key || bytes32 private_key")),(0,n.kt)("li",{parentName:"ul"},"Gas cost: 100,000")),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-solidity"},"function deriveSymmetricKey(bytes32 keyPublic, bytes32 keyPrivate) private view returns (bytes32) {\n    bytes32[3] memory data;\n    data[0] = keyPublic;\n    data[1] = keyPrivate;\n    assembly {\n        let success := staticcall(gas(), 0x0100000000000000000000000000000000000002, data, 0x40, add(data, 0x40), 0x20)\n        if iszero(success) {\n            revert(0, 0)\n        }\n    }\n    return data[2];\n}\n")),(0,n.kt)("h2",{id:"deoxys-ii-encryption"},"Deoxys-II Encryption"),(0,n.kt)("h3",{id:"overview-1"},"Overview"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Encryption precompile address: ",(0,n.kt)("inlineCode",{parentName:"li"},"0x0100000000000000000000000000000000000003")),(0,n.kt)("li",{parentName:"ul"},"Decryption precompile address: ",(0,n.kt)("inlineCode",{parentName:"li"},"0x0100000000000000000000000000000000000004")),(0,n.kt)("li",{parentName:"ul"},"Input format: ",(0,n.kt)("inlineCode",{parentName:"li"},"bytes32 key || bytes32 nonce || uint text_length || uint additional_data_length || text_or_ciphertext || additional_data")),(0,n.kt)("li",{parentName:"ul"},"Gas cost: 50,000 minimum plus 100 per byte of input")),(0,n.kt)("admonition",{type:"caution"},(0,n.kt)("p",{parentName:"admonition"},"Both the text and additional data should each be padded to a multiple of\n32 bytes.")),(0,n.kt)("h3",{id:"example-1"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-solidity"},"function encrypt(bytes32 key, bytes32 nonce, bytes memory text, bytes memory additionalData) private view returns (bytes memory result) {\n    assembly {\n        let p := mload(0x40)\n        mstore(p, key)\n        mstore(add(p, 0x20), nonce)\n        let text_len := mload(text)\n        mstore(add(p, 0x40), text_len)\n        let ad_len := mload(additionalData)\n        mstore(add(p, 0x60), ad_len)\n        let i := 0\n        for {} lt(i, text_len) { i := add(i, 0x20) } {\n            mstore(add(add(p, 0x80), i), mload(add(add(text, 0x20), i)))\n        }\n        let ad_begin := add(add(p, 0x80), i)\n        for { i := 0 } lt(i, ad_len) { i := add(i, 0x20) } {\n            mstore(add(ad_begin, i), mload(add(add(additionalData, 0x20), i)))\n        }\n        mstore(0x40, add(ad_begin, i))\n        let out := mload(0x40)\n        let success := staticcall(gas(), 0x0100000000000000000000000000000000000003, p, sub(out, p), out, 1)\n        if iszero(success) {\n            revert(0, 0)\n        }\n        mstore(out, returndatasize())\n        returndatacopy(add(out, 0x20), 0, returndatasize())\n        mstore(0x40, add(add(out, 0x20), returndatasize()))\n        result := out\n    }\n}\n")),(0,n.kt)("h2",{id:"library"},"Library"),(0,n.kt)("p",null,"The examples above show how to call the precompiles directly. For a more\ncomfortable experience, wrappers are also provided in ",(0,n.kt)("inlineCode",{parentName:"p"},"contracts/"),"\nproject in the\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/sapphire-paratime"},"Sapphire repository"),",\nlibrary file ",(0,n.kt)("inlineCode",{parentName:"p"},"contracts/Sapphire.sol"),". The wrappers have the same\nsignatures as the example wrappers above."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-solidity"},'pragma solidity ^0.8.13;\n\nimport "./Sapphire.sol";\n\ncontract Test {\n    constructor() {}\n    function test() public view returns (bytes32) {\n        return Sapphire.deriveSymmetricKey("public key as bytes32", "private key as bytes32");\n    }\n}\n')))}c.isMDXComponent=!0}}]);