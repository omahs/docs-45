"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[910],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=u;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4097:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const s={},i="Staking",r={unversionedId:"core/consensus/services/staking",id:"core/consensus/services/staking",title:"Staking",description:"The staking service is responsible for managing the staking ledger in the",source:"@site/docs/core/consensus/services/staking.md",sourceDirName:"core/consensus/services",slug:"/core/consensus/services/staking",permalink:"/core/consensus/services/staking",draft:!1,editUrl:"https://github.com/oasisprotocol/oasis-core/edit/stable/22.2.x/docs/consensus/services/staking.md",tags:[],version:"current",lastUpdatedAt:1669418750,formattedLastUpdatedAt:"Nov 25, 2022",frontMatter:{},sidebar:"oasisCore",previous:{title:"Random Beacon",permalink:"/core/consensus/services/beacon"},next:{title:"Registry",permalink:"/core/consensus/services/registry"}},l={},c=[{value:"Tokens and Base Units",id:"tokens-and-base-units",level:2},{value:"Accounts",id:"accounts",level:2},{value:"User Accounts",id:"user-accounts",level:3},{value:"Runtime Accounts",id:"runtime-accounts",level:3},{value:"Reserved Addresses",id:"reserved-addresses",level:3},{value:"General",id:"general",level:3},{value:"Escrow",id:"escrow",level:3},{value:"Delegation",id:"delegation",level:4},{value:"Commission Schedule",id:"commission-schedule",level:4},{value:"Methods",id:"methods",level:2},{value:"Transfer",id:"transfer",level:3},{value:"Burn",id:"burn",level:3},{value:"Add Escrow",id:"add-escrow",level:3},{value:"Reclaim Escrow",id:"reclaim-escrow",level:3},{value:"Amend Commission Schedule",id:"amend-commission-schedule",level:3},{value:"Allow",id:"allow",level:3},{value:"Withdraw",id:"withdraw",level:3},{value:"Events",id:"events",level:2},{value:"Transfer Event",id:"transfer-event",level:3},{value:"Burn Event",id:"burn-event",level:3},{value:"Escrow Event",id:"escrow-event",level:3},{value:"Add Escrow Event",id:"add-escrow-event",level:4},{value:"Take Escrow Event",id:"take-escrow-event",level:4},{value:"Reclaim Escrow Event",id:"reclaim-escrow-event",level:4},{value:"Allowance Change Event",id:"allowance-change-event",level:3},{value:"Consensus Parameters",id:"consensus-parameters",level:2},{value:"Test Vectors",id:"test-vectors",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"staking"},"Staking"),(0,o.kt)("p",null,"The staking service is responsible for managing the staking ledger in the\nconsensus layer. It enables operations like transferring stake between accounts\nand escrowing stake for specific needs (e.g., operating nodes)."),(0,o.kt)("p",null,"The service interface definition lives in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/oasis-core/tree/master/go/staking/api/api.go"},(0,o.kt)("inlineCode",{parentName:"a"},"go/staking/api")),". It defines the\nsupported queries and transactions. For more information you can also check out\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc"},"consensus service API documentation"),"."),(0,o.kt)("h2",{id:"tokens-and-base-units"},"Tokens and Base Units"),(0,o.kt)("p",null,"Stake amounts can be denominated in tokens and base units."),(0,o.kt)("p",null,"Tokens are used in user-facing scenarios (e.g. CLI commands) where the token\namount is prefixed with the token's ticker symbol as defined by the ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#Genesis"},(0,o.kt)("inlineCode",{parentName:"a"},"Genesis"),"'\n",(0,o.kt)("inlineCode",{parentName:"a"},"TokenSymbol")," field"),"."),(0,o.kt)("p",null,"Another ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#Genesis"},(0,o.kt)("inlineCode",{parentName:"a"},"Genesis"),"' field, ",(0,o.kt)("inlineCode",{parentName:"a"},"TokenValueExponent")),", defines the\ntoken's value base-10 exponent.\nFor example, if ",(0,o.kt)("inlineCode",{parentName:"p"},"TokenValueExponent")," is 6, then 1 token equals 10^6 (i.e. one\nmillion) base units."),(0,o.kt)("p",null,"Internally, base units are used for all stake calculation and processing."),(0,o.kt)("h2",{id:"accounts"},"Accounts"),(0,o.kt)("p",null,"A staking account is an entry in the staking ledger. It can hold both general\nand escrow accounts."),(0,o.kt)("p",null,"Each staking account has an address which is derived from the corresponding\npublic key as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[ 1 byte <ctx-version> ][ first 20 bytes of SHA512-256(<ctx-identifier> || <ctx-version> || <data>) ]\n")),(0,o.kt)("p",null,"Where ",(0,o.kt)("inlineCode",{parentName:"p"},"<ctx-version>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"<ctx-identifier>")," represent the staking account\naddress' context version and identifier and ",(0,o.kt)("inlineCode",{parentName:"p"},"<data>")," represents the data\nspecific to the address kind."),(0,o.kt)("p",null,"There are two kinds of accounts:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"User accounts linked to a specific public key."),(0,o.kt)("li",{parentName:"ul"},"Runtime accounts linked to a specific ",(0,o.kt)("a",{parentName:"li",href:"/core/runtime/identifiers"},"runtime identifier"),".")),(0,o.kt)("p",null,"Addresses use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32"},"Bech32 encoding")," for text serialization with ",(0,o.kt)("inlineCode",{parentName:"p"},"oasis")," as its human\nreadable part (HRP) prefix (for both kinds of accounts)."),(0,o.kt)("h3",{id:"user-accounts"},"User Accounts"),(0,o.kt)("p",null,"In case of user accounts, the ",(0,o.kt)("inlineCode",{parentName:"p"},"<ctx-version>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"<ctx-identifier>")," are as\ndefined by the ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#pkg-variables"},(0,o.kt)("inlineCode",{parentName:"a"},"AddressV0Context")," variable"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"<data>")," represents the\naccount signer's public key (e.g. entity id)."),(0,o.kt)("p",null,"For more details, see the ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#NewAddress"},(0,o.kt)("inlineCode",{parentName:"a"},"NewAddress")," function"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"When generating an account's private/public key pair, follow ",(0,o.kt)("a",{parentName:"p",href:"/adrs/0008-standard-account-key-generation"},"ADR 0008:\nStandard Account Key Generation"),".")),(0,o.kt)("h3",{id:"runtime-accounts"},"Runtime Accounts"),(0,o.kt)("p",null,"In case of runtime accounts, the ",(0,o.kt)("inlineCode",{parentName:"p"},"<ctx-version>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"<ctx-identifier>")," are as\ndefined by the ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#pkg-variables"},(0,o.kt)("inlineCode",{parentName:"a"},"AddressRuntimeV0Context")," variable"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"<data>")," represents the\n",(0,o.kt)("a",{parentName:"p",href:"/core/runtime/identifiers"},"runtime identifier"),"."),(0,o.kt)("p",null,"For more details, see the ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#NewRuntimeAddress"},(0,o.kt)("inlineCode",{parentName:"a"},"NewRuntimeAddress")," function"),"."),(0,o.kt)("p",null,"The runtime accounts belong to runtimes and can only be manipulated by the\nruntime by ",(0,o.kt)("a",{parentName:"p",href:"/core/runtime/messages"},"emitting messages")," to the consensus layer."),(0,o.kt)("h3",{id:"reserved-addresses"},"Reserved Addresses"),(0,o.kt)("p",null,"Some staking account addresses are reserved to prevent them from being\naccidentally used in the actual ledger."),(0,o.kt)("p",null,"Currently, they are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"oasis1qrmufhkkyyf79s5za2r8yga9gnk4t446dcy3a5zm"),": common pool address\n(defined by ",(0,o.kt)("a",{parentName:"li",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#pkg-variables"},(0,o.kt)("inlineCode",{parentName:"a"},"CommonPoolAddress")," variable"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"oasis1qqnv3peudzvekhulf8v3ht29z4cthkhy7gkxmph5"),": per-block fee accumulator\naddress (defined by ",(0,o.kt)("a",{parentName:"li",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#pkg-variables"},(0,o.kt)("inlineCode",{parentName:"a"},"FeeAccumulatorAddress")," variable"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"oasis1qp65laz8zsa9a305wxeslpnkh9x4dv2h2qhjz0ec"),": governance deposits address\n(defined by the ",(0,o.kt)("a",{parentName:"li",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#pkg-variables"},(0,o.kt)("inlineCode",{parentName:"a"},"GovernanceDeposits")," variable"),").")),(0,o.kt)("h3",{id:"general"},"General"),(0,o.kt)("p",null,"General accounts store account's general balance and nonce.\nNonce is the incremental number that must be unique for each account's\ntransaction."),(0,o.kt)("h3",{id:"escrow"},"Escrow"),(0,o.kt)("p",null,"Escrow accounts are used to hold stake delegated for specific consensus-layer\noperations (e.g., registering and running nodes).\nTheir balance is subject to special delegation provisions and a debonding\nperiod."),(0,o.kt)("p",null,"Delegation provisions, also called commissions, are specified by the\n",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#CommissionSchedule"},(0,o.kt)("inlineCode",{parentName:"a"},"CommissionSchedule")," field"),"."),(0,o.kt)("p",null,"An escrow account also has a corresponding stake accumulator.\nIt stores stake claims for an escrow account and ensures all claims are\nsatisfied at any given point.\nAdding a new claim is only possible if all of the existing claims plus the new\nclaim can be satisfied."),(0,o.kt)("h4",{id:"delegation"},"Delegation"),(0,o.kt)("p",null,"When a delegator wants to delegate some of amount of stake to a staking account,\nhe needs to escrow stake using ",(0,o.kt)("a",{parentName:"p",href:"#add-escrow"},"Add Escrow method"),"."),(0,o.kt)("p",null,"Similarly, when a delegator wants to reclaim some amount of escrowed stake back\nto his general account, he needs to reclaim stake using ",(0,o.kt)("a",{parentName:"p",href:"#reclaim-escrow"},"Reclaim Escrow method"),"."),(0,o.kt)("p",null,"To simplify accounting, each escrow results in the delegator account being\nissued shares which can be converted back to stake during the reclaim escrow\noperation."),(0,o.kt)("p",null,"When a delegator delegates some amount of stake to an escrow account, the\ndelegator receives the number of shares proportional to the current\n",(0,o.kt)("em",{parentName:"p"},"share price")," (in base units) calculated from the total number of stake\ndelegated to an escrow account so far and the number of shares issued so far:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"shares_per_base_unit = account_issued_shares / account_delegated_base_units\n")),(0,o.kt)("p",null,"For example, if an escrow account has the following state:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"escrow": {\n    "active": {\n        "balance": "250",\n        "total_shares": "1000"\n    },\n    ...\n}\n')),(0,o.kt)("p",null,"then the current share price (i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"shares_per_base_unit"),") is 1000 / 250 = 4."),(0,o.kt)("p",null,"Delegating 500 base units to this escrow account would result in 500 * 4 = 2000\nnewly issued shares."),(0,o.kt)("p",null,"Thus, the escrow account would have the following state afterwards:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"escrow": {\n    "active": {\n        "balance": "750",\n        "total_shares": "3000"\n    },\n    ...\n}\n')),(0,o.kt)("p",null,"When a delegator wants to reclaim a certain number of escrowed stake, the\n",(0,o.kt)("em",{parentName:"p"},"base unit price")," (in shares) must be calculated based on the escrow account's\ncurrent active balance and the number of issued shares:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"base_units_per_share = account_delegated_base_units / account_issued_shares\n")),(0,o.kt)("p",null,"Returning to our example escrow account, the current base unit price (i.e.\n",(0,o.kt)("inlineCode",{parentName:"p"},"base_units_per_share"),") is 750 / 3000 = 0.25."),(0,o.kt)("p",null,"Reclaiming 1200 shares would result in 1200 * 0.25 = 300 base units being\nreclaimed."),(0,o.kt)("p",null,"The escrow account would have the following state afterwards:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"escrow": {\n    "active": {\n        "balance": "450",\n        "total_shares": "1800"\n    },\n    ...\n}\n')),(0,o.kt)("p",null,"Reclaiming escrow does not complete immediately, but may be subject to a\ndebonding period during in which the stake still remains escrowed."),(0,o.kt)("h4",{id:"commission-schedule"},"Commission Schedule"),(0,o.kt)("p",null,"A staking account can be configured to take a commission on staking rewards\ngiven to its node(s). They are defined by the ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#CommissionRateStep"},(0,o.kt)("inlineCode",{parentName:"a"},"CommissionRateStep")," type"),"."),(0,o.kt)("p",null,"The commission rate must be within bounds, which the staking account can also\nspecify using the ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#CommissionRateBoundStep"},(0,o.kt)("inlineCode",{parentName:"a"},"CommissionRateBoundStep")," type"),"."),(0,o.kt)("p",null,"The commission rates and rate bounds can change over time which is defined\nby the ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#CommissionSchedule"},(0,o.kt)("inlineCode",{parentName:"a"},"CommissionSchedule")," type"),"."),(0,o.kt)("p",null,"To prevent unexpected changes in commission rates and rate bounds, they must\nbe specified a number of epochs in the future, controlled by the\n",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#CommissionScheduleRules"},(0,o.kt)("inlineCode",{parentName:"a"},"CommissionScheduleRules")," consensus parameter"),"."),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("p",null,"The following sections describe the methods supported by the consensus staking\nservice."),(0,o.kt)("h3",{id:"transfer"},"Transfer"),(0,o.kt)("p",null,"Transfer enables stake transfer between different accounts in the staking\nledger. A new transfer transaction can be generated using\n",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#NewTransferTx"},(0,o.kt)("inlineCode",{parentName:"a"},"NewTransferTx")," function"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Method name:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"staking.Transfer\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type Transfer struct {\n    To     Address           `json:"to"`\n    Amount quantity.Quantity `json:"amount"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Fields:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"to")," specifies the destination account's address."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount")," specifies the amount of base units to transfer.")),(0,o.kt)("p",null,"The transaction signer implicitly specifies the source account."),(0,o.kt)("h3",{id:"burn"},"Burn"),(0,o.kt)("p",null,"Burn destroys some stake in the caller's account. A new burn transaction can be\ngenerated using ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#NewBurnTx"},(0,o.kt)("inlineCode",{parentName:"a"},"NewBurnTx")," function"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Method name:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"staking.Burn\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type Burn struct {\n    Amount quantity.Quantity `json:"amount"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Fields:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount")," specifies the amount of base units to burn.")),(0,o.kt)("p",null,"The transaction signer implicitly specifies the caller's account."),(0,o.kt)("h3",{id:"add-escrow"},"Add Escrow"),(0,o.kt)("p",null,"Escrow transfers stake into an escrow account.\nFor more details, see the ",(0,o.kt)("a",{parentName:"p",href:"#delegation"},"Delegation section")," of this document.\nA new add escrow transaction can be generated using ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#NewAddEscrowTx"},(0,o.kt)("inlineCode",{parentName:"a"},"NewAddEscrowTx")," function"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Method name:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"staking.AddEscrow\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type Escrow struct {\n    Account Address           `json:"account"`\n    Amount  quantity.Quantity `json:"amount"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Fields:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"account")," specifies the destination escrow account's address."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount")," specifies the amount of base units to transfer.")),(0,o.kt)("p",null,"The transaction signer implicitly specifies the source account."),(0,o.kt)("h3",{id:"reclaim-escrow"},"Reclaim Escrow"),(0,o.kt)("p",null,"Reclaim escrow starts the escrow reclamation process.\nFor more details, see the ",(0,o.kt)("a",{parentName:"p",href:"#delegation"},"Delegation section")," of this document.\nA new reclaim escrow transaction can be generated using\n",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#NewReclaimEscrowTx"},(0,o.kt)("inlineCode",{parentName:"a"},"NewReclaimEscrowTx")," function"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Method name:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"staking.ReclaimEscrow\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type ReclaimEscrow struct {\n    Account Address           `json:"account"`\n    Shares  quantity.Quantity `json:"shares"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Fields:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"account")," specifies the source escrow account's address."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"shares")," specifies the number of shares to reclaim.")),(0,o.kt)("p",null,"The transaction signer implicitly specifies the destination account."),(0,o.kt)("h3",{id:"amend-commission-schedule"},"Amend Commission Schedule"),(0,o.kt)("p",null,"Amend commission schedule updates the commission schedule specified for the\ngiven escrow account.\nFor more details, see the ",(0,o.kt)("a",{parentName:"p",href:"#commission-schedule"},"Commission Schedule section")," of this document.\nA new amend commission schedule transaction can be\ngenerated using ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#NewAmendCommissionScheduleTx"},(0,o.kt)("inlineCode",{parentName:"a"},"NewAmendCommissionScheduleTx")," function"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Method name:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"staking.AmendCommissionSchedule\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type AmendCommissionSchedule struct {\n    Amendment CommissionSchedule `json:"amendment"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Fields:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amendment")," defines the amended commission schedule.")),(0,o.kt)("p",null,"The transaction signer implicitly specifies the escrow account."),(0,o.kt)("h3",{id:"allow"},"Allow"),(0,o.kt)("p",null,"Allow enables an account holder to set an allowance for a beneficiary. A new\nallow transaction can be generated using ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#NewAllowTx"},(0,o.kt)("inlineCode",{parentName:"a"},"NewAllowTx")," function"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Method name:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"staking.Allow\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type Allow struct {\n    Beneficiary  Address           `json:"beneficiary"`\n    Negative     bool              `json:"negative,omitempty"`\n    AmountChange quantity.Quantity `json:"amount_change"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Fields:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"beneficiary")," specifies the beneficiary account address."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount_change")," specifies the absolute value of the amount of base units to\nchange the allowance for."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"negative")," specifies whether the ",(0,o.kt)("inlineCode",{parentName:"li"},"amount_change")," should be subtracted instead\nof added.")),(0,o.kt)("p",null,"The transaction signer implicitly specifies the general account. Upon executing\nthe allow the following actions are performed:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If either the ",(0,o.kt)("inlineCode",{parentName:"p"},"disable_transfers")," staking consensus parameter is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"\nor the ",(0,o.kt)("inlineCode",{parentName:"p"},"max_allowances")," staking consensus parameter is set to zero, the method\nfails with ",(0,o.kt)("inlineCode",{parentName:"p"},"ErrForbidden"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It is checked whether either the transaction signer address or the\n",(0,o.kt)("inlineCode",{parentName:"p"},"beneficiary")," address are reserved. If any are reserved, the method fails with\n",(0,o.kt)("inlineCode",{parentName:"p"},"ErrForbidden"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Address specified by ",(0,o.kt)("inlineCode",{parentName:"p"},"beneficiary")," is compared with the transaction signer\naddress. If the addresses are the same, the method fails with\n",(0,o.kt)("inlineCode",{parentName:"p"},"ErrInvalidArgument"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The account indicated by the signer is loaded.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If the allow would create a new allowance and the maximum number of allowances\nfor an account has been reached, the method fails with ",(0,o.kt)("inlineCode",{parentName:"p"},"ErrTooManyAllowances"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The set of allowances is updated so that the allowance is updated as specified\nby ",(0,o.kt)("inlineCode",{parentName:"p"},"amount_change"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"negative"),". In case the change would cause the allowance to\nbe equal to zero or negative, the allowance is removed.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The account is saved.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The corresponding ",(0,o.kt)("a",{parentName:"p",href:"#allowance-change-event"},(0,o.kt)("inlineCode",{parentName:"a"},"AllowanceChangeEvent"))," is emitted."))),(0,o.kt)("h3",{id:"withdraw"},"Withdraw"),(0,o.kt)("p",null,"Withdraw enables a beneficiary to withdraw from the given account. A new\nwithdraw transaction can be generated using ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#NewWithdrawTx"},(0,o.kt)("inlineCode",{parentName:"a"},"NewWithdrawTx")," function"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Method name:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"staking.Withdraw\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type Withdraw struct {\n    From   Address           `json:"from"`\n    Amount quantity.Quantity `json:"amount"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Fields:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"from")," specifies the account address to withdraw from."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount")," specifies the amount of base units to withdraw.")),(0,o.kt)("p",null,"The transaction signer implicitly specifies the destination general account.\nUpon executing the withdrawal the following actions are performed:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If either the ",(0,o.kt)("inlineCode",{parentName:"p"},"disable_transfers")," staking consensus parameter is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"\nor the ",(0,o.kt)("inlineCode",{parentName:"p"},"max_allowances")," staking consensus parameter is set to zero, the method\nfails with ",(0,o.kt)("inlineCode",{parentName:"p"},"ErrForbidden"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It is checked whether either the transaction signer address or the\n",(0,o.kt)("inlineCode",{parentName:"p"},"from")," address are reserved. If any are reserved, the method fails with\n",(0,o.kt)("inlineCode",{parentName:"p"},"ErrForbidden"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Address specified by ",(0,o.kt)("inlineCode",{parentName:"p"},"from")," is compared with the transaction signer address.\nIf the addresses are the same, the method fails with ",(0,o.kt)("inlineCode",{parentName:"p"},"ErrInvalidArgument"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The source account indicated by ",(0,o.kt)("inlineCode",{parentName:"p"},"from")," is loaded.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The destination account indicated by the transaction signer is loaded.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"amount")," is deducted from the corresponding allowance in the source account.\nIf this would cause the allowance to go negative, the method fails with\n",(0,o.kt)("inlineCode",{parentName:"p"},"ErrForbidden"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"amount")," is deducted from the source general account balance. If this would\ncause the balance to go negative, the method fails with\n",(0,o.kt)("inlineCode",{parentName:"p"},"ErrInsufficientBalance"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"amount")," is added to the destination general account balance.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Both source and destination accounts are saved.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The corresponding ",(0,o.kt)("a",{parentName:"p",href:"#transfer-event"},(0,o.kt)("inlineCode",{parentName:"a"},"TransferEvent"))," is emitted.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The corresponding ",(0,o.kt)("a",{parentName:"p",href:"#allowance-change-event"},(0,o.kt)("inlineCode",{parentName:"a"},"AllowanceChangeEvent"))," is emitted with the updated\nallowance."))),(0,o.kt)("h2",{id:"events"},"Events"),(0,o.kt)("h3",{id:"transfer-event"},"Transfer Event"),(0,o.kt)("p",null,"The transfer event is emitted when tokens are transferred from a source account\nto a destination account."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type TransferEvent struct {\n  From   Address           `json:"from"`\n  To     Address           `json:"to"`\n  Amount quantity.Quantity `json:"amount"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Fields:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"from")," contains the address of the source account."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"to")," contains the address of the destination account."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount")," contains the amount (in base units) transferred.")),(0,o.kt)("h3",{id:"burn-event"},"Burn Event"),(0,o.kt)("p",null,"The burn event is emitted when tokens are burned."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type BurnEvent struct {\n  Owner  Address           `json:"owner"`\n  Amount quantity.Quantity `json:"amount"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Fields:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"owner")," contains the address of the account that burned tokens."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount")," contains the amount (in base units) burned.")),(0,o.kt)("h3",{id:"escrow-event"},"Escrow Event"),(0,o.kt)("p",null,"Escrow events are emitted when tokens are escrowed, taken from escrow by the\nprotocol or reclaimed from escrow by the account owner."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type EscrowEvent struct {\n  Add     *AddEscrowEvent     `json:"add,omitempty"`\n  Take    *TakeEscrowEvent    `json:"take,omitempty"`\n  Reclaim *ReclaimEscrowEvent `json:"reclaim,omitempty"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Fields:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"add")," is set if the emitted event is an ",(0,o.kt)("em",{parentName:"li"},"Add Escrow")," event."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"take")," is set if the emitted event is a ",(0,o.kt)("em",{parentName:"li"},"Take Escrow")," event."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"reclaim")," is set if the emitted event is a ",(0,o.kt)("em",{parentName:"li"},"Reclaim Escrow")," event.")),(0,o.kt)("h4",{id:"add-escrow-event"},"Add Escrow Event"),(0,o.kt)("p",null,"The add escrow event is emitted when funds are escrowed."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type AddEscrowEvent struct {\n  Owner     Address           `json:"owner"`\n  Escrow    Address           `json:"escrow"`\n  Amount    quantity.Quantity `json:"amount"`\n  NewShares quantity.Quantity `json:"new_shares"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Fields:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"owner")," contains the address of the source account."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"escrow")," contains the address of the destination account the tokens are being\nescrowed to."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount")," contains the amount (in base units) escrowed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"new_shares")," contains the amount of shares created as a result of the added\nescrow event. Can be zero in case of (non-commissioned) rewards, where stake\nis added without new shares to increase share price.")),(0,o.kt)("h4",{id:"take-escrow-event"},"Take Escrow Event"),(0,o.kt)("p",null,"The take escrow event is emitted by the protocol when escrowed funds are\nslashed for whatever reason."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type TakeEscrowEvent struct {\n  Owner  Address           `json:"owner"`\n  Amount quantity.Quantity `json:"amount"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Fields:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"owner")," contains the address of the account escrow has been taken from."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount")," contains the amount (in base units) taken.")),(0,o.kt)("h4",{id:"reclaim-escrow-event"},"Reclaim Escrow Event"),(0,o.kt)("p",null,"The reclaim escrow event is emitted when a reclaim escrow operation completes\nsuccessfully (after the debonding period has passed)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type ReclaimEscrowEvent struct {\n  Owner  Address           `json:"owner"`\n  Escrow Address           `json:"escrow"`\n  Amount quantity.Quantity `json:"amount"`\n  Shares quantity.Quantity `json:"shares"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Fields:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"owner")," contains the address of the account that reclaimed tokens from escrow."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"escrow")," contains the address of the account escrow has been reclaimed from."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount")," contains the amount (in base units) reclaimed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"shares")," contains the amount of shares reclaimed.")),(0,o.kt)("h3",{id:"allowance-change-event"},"Allowance Change Event"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type AllowanceChangeEvent struct {\n    Owner        Address           `json:"owner"`\n    Beneficiary  Address           `json:"beneficiary"`\n    Allowance    quantity.Quantity `json:"allowance"`\n    Negative     bool              `json:"negative,omitempty"`\n    AmountChange quantity.Quantity `json:"amount_change"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Fields:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"owner")," contains the address of the account owner where allowance has been\nchanged."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"beneficiary")," contains the address of the beneficiary."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"allowance")," contains the new total allowance."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"amount_change")," contains the absolute amount the allowance has changed for."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"negative")," specifies whether the allowance has been reduced rather than\nincreased.")),(0,o.kt)("p",null,"The event is emitted even if the new allowance is zero."),(0,o.kt)("h2",{id:"consensus-parameters"},"Consensus Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"max_allowances")," (uint32) specifies the maximum number of ",(0,o.kt)("a",{parentName:"li",href:"#allow"},"allowances")," an\naccount can store. Zero means that allowance functionality is disabled.")),(0,o.kt)("h2",{id:"test-vectors"},"Test Vectors"),(0,o.kt)("p",null,"To generate test vectors for various staking ",(0,o.kt)("a",{parentName:"p",href:"/core/consensus/transactions"},"transactions"),", run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"make -C go staking/gen_vectors\n")),(0,o.kt)("p",null,"For more information about the structure of the test vectors see the section\non ",(0,o.kt)("a",{parentName:"p",href:"/core/consensus/test-vectors"},"Transaction Test Vectors"),"."))}d.isMDXComponent=!0}}]);