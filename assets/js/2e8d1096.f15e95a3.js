"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[8038],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),m=u(n),c=i,h=m["".concat(l,".").concat(c)]||m[c]||p[c]||s;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var u=2;u<s;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7256:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const s={},o="ADR 0003: Consensus/Runtime Token Transfer",r={unversionedId:"adrs/0003-consensus-runtime-token-transfer",id:"adrs/0003-consensus-runtime-token-transfer",title:"ADR 0003: Consensus/Runtime Token Transfer",description:"Component",source:"@site/docs/adrs/0003-consensus-runtime-token-transfer.md",sourceDirName:"adrs",slug:"/adrs/0003-consensus-runtime-token-transfer",permalink:"/adrs/0003-consensus-runtime-token-transfer",draft:!1,editUrl:"https://github.com/oasisprotocol/adrs/edit/main/0003-consensus-runtime-token-transfer.md",tags:[],version:"current",lastUpdatedAt:1674490900,formattedLastUpdatedAt:"Jan 23, 2023",frontMatter:{},sidebar:"adrs",previous:{title:"ADR 0002: Go Modules Compatible Git Tags",permalink:"/adrs/0002-go-modules-compatible-git-tags"},next:{title:"ADR 0004: Runtime Governance",permalink:"/adrs/0004-runtime-governance"}},l={},u=[{value:"Component",id:"component",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Addresses",id:"addresses",level:3},{value:"State",id:"state",level:3},{value:"General Accounts",id:"general-accounts",level:4},{value:"Transaction Methods",id:"transaction-methods",level:3},{value:"Allow",id:"allow",level:4},{value:"Withdraw",id:"withdraw",level:4},{value:"Queries",id:"queries",level:3},{value:"Messages",id:"messages",level:3},{value:"Staking Method Call",id:"staking-method-call",level:4},{value:"Consensus Parameters",id:"consensus-parameters",level:3},{value:"Staking",id:"staking",level:4},{value:"Roothash",id:"roothash",level:4},{value:"Runtime Host Protocol",id:"runtime-host-protocol",level:3},{value:"Host to Runtime: Initialization",id:"host-to-runtime-initialization",level:4},{value:"Host to Runtime: Transaction Batch Dispatch",id:"host-to-runtime-transaction-batch-dispatch",level:4},{value:"Runtime to Host: Read-only Storage Access",id:"runtime-to-host-read-only-storage-access",level:4},{value:"Rust Runtime Support Library",id:"rust-runtime-support-library",level:3},{value:"Expected User/Consensus/Runtime Flow",id:"expected-userconsensusruntime-flow",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2}],d={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"adr-0003-consensusruntime-token-transfer"},"ADR 0003: Consensus/Runtime Token Transfer"),(0,i.kt)("h2",{id:"component"},"Component"),(0,i.kt)("p",null,"Oasis Core"),(0,i.kt)("h2",{id:"changelog"},"Changelog"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"2020-09-16: Beneficiary allowance, add message results"),(0,i.kt)("li",{parentName:"ul"},"2020-09-08: Initial draft")),(0,i.kt)("h2",{id:"status"},"Status"),(0,i.kt)("p",null,"Accepted"),(0,i.kt)("h2",{id:"context"},"Context"),(0,i.kt)("p",null,"Currently each runtime can define its own token (or none at all) and there is no\nmechanism that would support transfer of consensus layer tokens into a runtime\nand back out."),(0,i.kt)("p",null,"Introducing such a mechanism would allow the consensus layer tokens to be used\ninside runtimes for various functions. This ADR proposes such a mechanism."),(0,i.kt)("h2",{id:"decision"},"Decision"),(0,i.kt)("p",null,"On a high level, this proposal adds support for consensus/runtime token\ntransfers as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Each staking account can set an allowance for beneficiaries.")," Each staking\naccount can set an allowance, a maximum amount a beneficiary can withdraw from\nthe given account. Beneficiaries are identified by their address. This is\nsimilar to approve/transferFrom calls defined by the ",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC-20 Token Standard"),".\nPreviously such functionality was already present but was removed in\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/oasis-core/issues/2021"},"oasis-core#2021"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Each runtime itself has an account in the consensus layer.")," This account\ncontains the balance of tokens which are managed exclusively by the runtime\nand do not belong to any specific regular account in the consensus layer."),(0,i.kt)("p",{parentName:"li"},"It is not possible to transfer directly into a runtime account and doing so\nmay result in funds to be locked without a way to reclaim them."),(0,i.kt)("p",{parentName:"li"},"The only way to perform any operations on runtime accounts is through the use\nof messages emitted by the runtime during each round. These messages are\nsubject to discrepancy detection and instruct the consensus layer what to do."))),(0,i.kt)("p",null,"Combined, the two mechanisms enable account holders to set an allowance in the\nbenefit of runtimes so that the runtimes can withdraw up to the allowed amount\nfrom the account holder's address."),(0,i.kt)("h3",{id:"addresses"},"Addresses"),(0,i.kt)("p",null,"This proposal introduces the following new address context for the runtime\naccounts:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"oasis-core/address: runtime\n")),(0,i.kt)("p",null,"Initial version for the address context is ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),". To derive the address, the\nstandard address derivation scheme is used, with the runtime's 32-byte\nidentifier used as the ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," part."),(0,i.kt)("h3",{id:"state"},"State"),(0,i.kt)("p",null,"This proposal introduces/updates the following consensus state in the staking\nmodule:"),(0,i.kt)("h4",{id:"general-accounts"},"General Accounts"),(0,i.kt)("p",null,"The general account data structure is modified to include an additional field\nstoring the allowances as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},'type GeneralAccount struct {\n    // ... existing fields omitted ...\n\n    Allowances map[Address]quantity.Quantity `json:"allowances,omitempty"`\n}\n')),(0,i.kt)("h3",{id:"transaction-methods"},"Transaction Methods"),(0,i.kt)("p",null,"This proposal adds the following new transaction methods in the staking module:"),(0,i.kt)("h4",{id:"allow"},"Allow"),(0,i.kt)("p",null,"Allow enables an account holder to set an allowance for a beneficiary."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Method name:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"staking.Allow\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Body:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},'type Allow struct {\n    Beneficiary  Address           `json:"beneficiary"`\n    Negative     bool              `json:"negative,omitempty"`\n    AmountChange quantity.Quantity `json:"amount_change"`\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Fields:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"beneficiary")," specifies the beneficiary account address."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount_change")," specifies the absolute value of the amount of base units to\nchange the allowance for."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"negative")," specifies whether the ",(0,i.kt)("inlineCode",{parentName:"li"},"amount_change")," should be subtracted instead\nof added.")),(0,i.kt)("p",null,"The transaction signer implicitly specifies the general account. Upon executing\nthe allow the following actions are performed:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If either the ",(0,i.kt)("inlineCode",{parentName:"p"},"disable_transfers")," staking consensus parameter is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"\nor the ",(0,i.kt)("inlineCode",{parentName:"p"},"max_allowances")," staking consensus parameter is set to zero, the method\nfails with ",(0,i.kt)("inlineCode",{parentName:"p"},"ErrForbidden"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"It is checked whether either the transaction signer address or the\n",(0,i.kt)("inlineCode",{parentName:"p"},"beneficiary")," address are reserved. If any are reserved, the method fails with\n",(0,i.kt)("inlineCode",{parentName:"p"},"ErrForbidden"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Address specified by ",(0,i.kt)("inlineCode",{parentName:"p"},"beneficiary")," is compared with the transaction signer\naddress. If the addresses are the same, the method fails with\n",(0,i.kt)("inlineCode",{parentName:"p"},"ErrInvalidArgument"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The account indicated by the signer is loaded.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the allow would create a new allowance and the maximum number of allowances\nfor an account has been reached, the method fails with ",(0,i.kt)("inlineCode",{parentName:"p"},"ErrTooManyAllowances"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The set of allowances is updated so that the allowance is updated as specified\nby ",(0,i.kt)("inlineCode",{parentName:"p"},"amount_change"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"negative"),". In case the change would cause the allowance to\nbe equal to zero or negative, the allowance is removed.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The account is saved.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},"AllowanceChangeEvent")," is emitted with the following\nstructure:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-golang"},'type AllowanceChangeEvent struct {\n    Owner        Address           `json:"owner"`\n    Beneficiary  Address           `json:"beneficiary"`\n    Allowance    quantity.Quantity `json:"allowance"`\n    Negative     bool              `json:"negative,omitempty"`\n    AmountChange quantity.Quantity `json:"amount_change"`\n}\n')),(0,i.kt)("p",{parentName:"li"},"Where ",(0,i.kt)("inlineCode",{parentName:"p"},"allowance")," contains the new total allowance, the ",(0,i.kt)("inlineCode",{parentName:"p"},"amount_change"),"\ncontains the absolute amount the allowance has changed for and ",(0,i.kt)("inlineCode",{parentName:"p"},"negative"),"\nspecifies whether the allowance has been reduced rather than increased. The\nevent is emitted even if the new allowance is zero."))),(0,i.kt)("h4",{id:"withdraw"},"Withdraw"),(0,i.kt)("p",null,"Withdraw enables a beneficiary to withdraw from the given account."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Method name:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"staking.Withdraw\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Body:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},'type Withdraw struct {\n    From   Address           `json:"from"`\n    Amount quantity.Quantity `json:"amount"`\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Fields:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"from")," specifies the account address to withdraw from."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount")," specifies the amount of base units to withdraw.")),(0,i.kt)("p",null,"The transaction signer implicitly specifies the destination general account.\nUpon executing the withdrawal the following actions are performed:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If either the ",(0,i.kt)("inlineCode",{parentName:"p"},"disable_transfers")," staking consensus parameter is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"\nor the ",(0,i.kt)("inlineCode",{parentName:"p"},"max_allowances")," staking consensus parameter is set to zero, the method\nfails with ",(0,i.kt)("inlineCode",{parentName:"p"},"ErrForbidden"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"It is checked whether either the transaction signer address or the\n",(0,i.kt)("inlineCode",{parentName:"p"},"from")," address are reserved. If any are reserved, the method fails with\n",(0,i.kt)("inlineCode",{parentName:"p"},"ErrForbidden"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Address specified by ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," is compared with the transaction signer address.\nIf the addresses are the same, the method fails with ",(0,i.kt)("inlineCode",{parentName:"p"},"ErrInvalidArgument"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The source account indicated by ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," is loaded.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The destination account indicated by the transaction signer is loaded.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"amount")," is deducted from the corresponding allowance in the source account.\nIf this would cause the allowance to go negative, the method fails with\n",(0,i.kt)("inlineCode",{parentName:"p"},"ErrForbidden"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"amount")," is deducted from the source general account balance. If this would\ncause the balance to go negative, the method fails with\n",(0,i.kt)("inlineCode",{parentName:"p"},"ErrInsufficientBalance"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"amount")," is added to the destination general account balance.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Both source and destination accounts are saved.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},"TransferEvent")," is emitted.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},"AllowanceChangeEvent")," is emitted with the updated\nallowance."))),(0,i.kt)("h3",{id:"queries"},"Queries"),(0,i.kt)("p",null,"This proposal adds the following new query methods in the staking module by\nupdating the ",(0,i.kt)("inlineCode",{parentName:"p"},"staking.Backend")," interface as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},'type Backend interface {\n    // ... existing methods omitted ...\n\n    // Allowance looks up the allowance for the given owner/beneficiary combination.\n    Allowance(ctx context.Context, query *AllowanceQuery) (*quantity.Quantity, error)\n}\n\n// AllowanceQuery is an allowance query.\ntype AllowanceQuery struct {\n    Height      int64   `json:"height"`\n    Owner       Address `json:"owner"`\n    Beneficiary Address `json:"beneficiary"`\n}\n')),(0,i.kt)("h3",{id:"messages"},"Messages"),(0,i.kt)("p",null,"Since this is the first proposal that introduces a new runtime message type that\ncan be emitted from a runtime during a round, it also defines some general\nproperties of runtime messages and the dispatch mechanism:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Each message has an associated gas cost that needs to be paid by the\nsubmitter (e.g. as part of the ",(0,i.kt)("inlineCode",{parentName:"p"},"roothash.ExecutorCommit")," method call). The gas\ncost is split among the committee members.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"There is a maximum number of messages that can be emitted by a runtime during\na given round. The limit is defined both globally (e.g. a roothash consensus\nparameter) and per-runtime (which needs to be equal to or lower than the\nglobal limit).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Messages are serialized using a sum type describing all possible messages,\nwhere each message type is assigned a ",(0,i.kt)("em",{parentName:"p"},"field name"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-golang"},'type Message struct {\n    Message1 *Message1 `json:"message1,omitempty"`\n    Message2 *Message2 `json:"message2,omitempty"`\n    // ...\n}\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"All messages are versioned by embeding the ",(0,i.kt)("inlineCode",{parentName:"p"},"cbor.Versioned")," structure which\nprovides a single ",(0,i.kt)("inlineCode",{parentName:"p"},"uint16")," field ",(0,i.kt)("inlineCode",{parentName:"p"},"v"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A change is made to how messages are included in commitments, to reduce the\nsize of submitted transactions."),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ComputeResultsHeader")," is changed so that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Messages")," field is replaced\nwith a ",(0,i.kt)("inlineCode",{parentName:"p"},"MessagesHash")," field containing a hash of the CBOR-encoded messages\nemitted by the runtime."),(0,i.kt)("p",{parentName:"li"},"At the same time ",(0,i.kt)("inlineCode",{parentName:"p"},"ComputeBody")," is changed to include an additional field\n",(0,i.kt)("inlineCode",{parentName:"p"},"Messages")," as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-golang"},'type ComputeBody struct {\n    // ... existing fields omitted ...\n    Messages []*block.Message `json:"messages,omitempty"`\n}\n')),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Messages")," field must only be populated in the commitment by the\ntransaction scheduler and must match the ",(0,i.kt)("inlineCode",{parentName:"p"},"MessagesHash"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If any of the included messages is deemed ",(0,i.kt)("em",{parentName:"p"},"malformed"),", the round fails and the\nruntime state is not updated.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In order to support messages that fail to execute, a new roothash event is\nemitted for each executed message:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-golang"},'type MessageEvent struct {\n    Index  uint32 `json:"index,omitempty"`\n    Module string `json:"module,omitempty"`\n    Code   uint32 `json:"code,omitempty"`\n}\n')),(0,i.kt)("p",{parentName:"li"},"Where the ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," specifies the index of the executed message and the ",(0,i.kt)("inlineCode",{parentName:"p"},"module"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," specify the module and error code accoording to Oasis Core error\nencoding convention (note that the usual human readable message field is not\nincluded)."))),(0,i.kt)("p",null,"This proposal introduces the following runtime messages:"),(0,i.kt)("h4",{id:"staking-method-call"},"Staking Method Call"),(0,i.kt)("p",null,"The staking method call message enables a runtime to call one of the supported\nstaking module methods."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Field name:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"staking\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Body:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},'type StakingMessage struct {\n    cbor.Versioned\n\n    Transfer *staking.Transfer `json:"transfer,omitempty"`\n    Withdraw *staking.Withdraw `json:"withdraw,omitempty"`\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Fields:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"v")," must be set to ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transfer")," indicates that the ",(0,i.kt)("inlineCode",{parentName:"li"},"staking.Transfer")," method should be executed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withdraw")," indicates that the ",(0,i.kt)("inlineCode",{parentName:"li"},"staking.Withdraw")," method should be executed.")),(0,i.kt)("p",null,"Exactly one of the supported method fields needs to be non-nil, otherwise the\nmessage is considered malformed."),(0,i.kt)("h3",{id:"consensus-parameters"},"Consensus Parameters"),(0,i.kt)("h4",{id:"staking"},"Staking"),(0,i.kt)("p",null,"This proposal introduces the following new consensus parameters in the staking\nmodule:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_allowances")," (uint32) specifies the maximum number of allowances an\naccount can store. Zero means that allowance functionality is disabled.")),(0,i.kt)("h4",{id:"roothash"},"Roothash"),(0,i.kt)("p",null,"This proposal introduces the following new consensus parameters in the roothash\nmodule:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_runtime_messages")," (uint32) specifies the global limit on the number of\nmessages that can be emitted in each round by the runtime. The default value\nof ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," disables the use of runtime messages.")),(0,i.kt)("h3",{id:"runtime-host-protocol"},"Runtime Host Protocol"),(0,i.kt)("p",null,"This proposal modifies the runtime host protocol as follows:"),(0,i.kt)("h4",{id:"host-to-runtime-initialization"},"Host to Runtime: Initialization"),(0,i.kt)("p",null,"The existing ",(0,i.kt)("inlineCode",{parentName:"p"},"RuntimeInfoRequest")," message body is updated to contain a field\ndenoting the consensus backend used by the host and its consensus protocol\nversion as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},'type RuntimeInfoRequest struct {\n    ConsensusBackend         string `json:"consensus_backend"`\n    ConsensusProtocolVersion uint64 `json:"consensus_protocol_version"`\n\n    // ... existing fields omitted ...\n}\n')),(0,i.kt)("p",null,"This information can be used by the runtime to ensure that it supports the\nconsensus layer used by the host. In case the backend and/or protocol version is\nnot supported, the runtime should return an error and terminate. In case the\nruntime does not interact with the consensus layer it may ignore the consensus\nlayer information."),(0,i.kt)("h4",{id:"host-to-runtime-transaction-batch-dispatch"},"Host to Runtime: Transaction Batch Dispatch"),(0,i.kt)("p",null,"The existing ",(0,i.kt)("inlineCode",{parentName:"p"},"RuntimeExecuteTxBatchRequest")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RuntimeCheckTxBatchRequest"),"\nmessage bodies are updated to include the consensus layer light block at the\nlast finalized round height (specified in ",(0,i.kt)("inlineCode",{parentName:"p"},".Block.Header.Round"),") and the list of\n",(0,i.kt)("inlineCode",{parentName:"p"},"MessageEvent"),"s emitted while processing the runtime messages emitted in the\nprevious round as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},'type RuntimeExecuteTxBatchRequest struct {\n    // ConsensusBlock is the consensus light block at the last finalized round\n    // height (e.g., corresponding to .Block.Header.Round).\n    ConsensusBlock consensus.LightBlock `json:"consensus_block"`\n\n    // MessageResults are the results of executing messages emitted by the\n    // runtime in the previous round (sorted by .Index).\n    MessageResults []roothash.MessageEvent `json:"message_results,omitempty"`\n\n    // ... existing fields omitted ...\n}\n\ntype RuntimeCheckTxBatchRequest struct {\n    // ConsensusBlock is the consensus light block at the last finalized round\n    // height (e.g., corresponding to .Block.Header.Round).\n    ConsensusBlock consensus.LightBlock `json:"consensus_block"`\n\n    // ... existing fields omitted ...\n}\n')),(0,i.kt)("p",null,"The information from the light block can be used to access consensus layer\nstate."),(0,i.kt)("h4",{id:"runtime-to-host-read-only-storage-access"},"Runtime to Host: Read-only Storage Access"),(0,i.kt)("p",null,"The existing ",(0,i.kt)("inlineCode",{parentName:"p"},"HostStorageSyncRequest")," message body is updated to include an\nendpoint identifier as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},'type HostStorageSyncRequest struct {\n    // Endpoint is the storage endpoint to which this request should be routed.\n    Endpoint string `json:"endpoint,omitempty"`\n\n    // ... existing fields omitted ...\n}\n')),(0,i.kt)("p",null,"The newly introduced ",(0,i.kt)("inlineCode",{parentName:"p"},"endpoint")," field can take the following values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"runtime")," (or empty string) denotes the runtime state endpoint. The empty\nvalue is allowed for backwards compatibility as this was the only endpoint\navailable before this proposal.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"consensus")," denotes the consensus state endpoint, providing access to\nconsensus state."))),(0,i.kt)("h3",{id:"rust-runtime-support-library"},"Rust Runtime Support Library"),(0,i.kt)("p",null,"The Rust runtime support library (",(0,i.kt)("inlineCode",{parentName:"p"},"oasis-core-runtime"),") must be updated to\nsupport the updated message structures. Additionally, there needs to be basic\nsupport for interpreting the data from the Tendermint consensus layer backend:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Decoding light blocks.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Decoding staking-related state structures."))),(0,i.kt)("p",null,"The Tendermint-specific functionality should be part of a separate crate."),(0,i.kt)("h3",{id:"expected-userconsensusruntime-flow"},"Expected User/Consensus/Runtime Flow"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Scenario:")),(0,i.kt)("p",null,"Account holder has 100 tokens in her account in the consensus layer staking\nledger and would like to spend 50 tokens to execute an action in runtime X."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Flow:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Account holder sets an allowance of 50 tokens for runtime X by submitting an\nallow transaction to the consensus layer.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Account holder submits a runtime transaction that performs some action costing\n50 tokens.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Account holder's runtime transaction is executed in runtime X round R:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Runtime X emits a message to transfer 50 tokens from the user's account to\nthe runtime's own account."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"As an optimization runtime X can verify current consensus layer state and\nreject the transaction early to prevent paying for needless consensus layer\nmessage processing."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Runtime X updates its state to indicate a pending transfer of 50 tokens from\nthe user. It uses the index of the emitted message to be able to match the\nmessage execution result once it arrives.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Runtime X submits commitments to the consensus layer.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When finalizing round R for runtime X, the consensus layer transfers 50 tokens\nfrom the account holder's account to the runtime X account.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Corresponding message result event is emitted, indicating success.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When runtime X processes round R+1, the runtime receives the set of emitted\nmessage result events.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Runtime X processes message result events, using the index field to match the\ncorresponding pending action and executes whatever action it queued."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"In case the message result event would indicate failure, the pending action\ncan be pruned.")))),(0,i.kt)("h2",{id:"consequences"},"Consequences"),(0,i.kt)("h3",{id:"positive"},"Positive"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Consensus layer tokens can be transferred into and out of runtimes, enabling\nmore use cases.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any tokens must be explicitly made available to the runtime which limits the\ndamage from badly written or malicious runtimes.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Account holders can change the allowance at any time."))),(0,i.kt)("h3",{id:"negative"},"Negative"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A badly written or malicious runtime could steal the tokens explicitly\ndeposited into the runtime. This includes any actions by the runtime owner\nwhich would modify the runtime's security parameters.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A badly written, malicious or forever suspended runtime can lock tokens in\nthe runtime account forever. This could be mitigated via an unspecified\nconsensus layer governance mechanism.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Account holders may mistakenly transfer tokens directly into a runtime account\nwhich may cause such tokens to be locked forever.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Account holders may change the allowance or reduce their account balance right\nbefore the runtime round is finalized, causing the emitted messages to fail\nwhile the runtime still needs to pay for gas to execute the messages."))),(0,i.kt)("h3",{id:"neutral"},"Neutral"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The runtime must handle all message results in the next round as otherwise it\ncannot easily get past messages.")),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC-20 Token Standard")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/oasisprotocol/oasis-core/issues/2021"},"oasis-core#2021"))))}p.isMDXComponent=!0}}]);