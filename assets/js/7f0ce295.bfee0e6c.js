"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[766],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,g=m["".concat(s,".").concat(u)]||m[u]||d[u]||a;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6134:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const a={},o="Versioning",l={unversionedId:"oasis-core-ledger/versioning",id:"oasis-core-ledger/versioning",title:"Versioning",description:"Oasis Core Ledger uses [Semantic Versioning 2.0.0] with the following format:",source:"@site/docs/oasis-core-ledger/versioning.md",sourceDirName:"oasis-core-ledger",slug:"/oasis-core-ledger/versioning",permalink:"/oasis-core-ledger/versioning",draft:!1,editUrl:"https://github.com/oasisprotocol/oasis-core-ledger/edit/master/docs/versioning.md",tags:[],version:"current",lastUpdatedAt:1663062926,formattedLastUpdatedAt:"Sep 13, 2022",frontMatter:{},sidebar:"oasisSdk",previous:{title:"Identifying Wallets",permalink:"/oasis-core-ledger/usage/wallets"},next:{title:"Release Process",permalink:"/oasis-core-ledger/release-process"}},s={},p=[],c={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"versioning"},"Versioning"),(0,i.kt)("p",null,"Oasis Core Ledger uses ",(0,i.kt)("a",{parentName:"p",href:"https://semver.org/spec/v2.0.0.html"},"Semantic Versioning 2.0.0")," with the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"MAJOR.MINOR.PATCH[-MODIFIER]\n")),(0,i.kt)("p",null,"where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MAJOR")," represents the major version starting with zero (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"2"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"3"),", ...),"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MINOR")," represents the minor version starting with zero (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"2"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"3"),", ...),"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PATCH"),' represents the final number in the version (sometimes referred\nto as the "micro" segment) (e.g. ',(0,i.kt)("inlineCode",{parentName:"li"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"2"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"3"),", ...)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MODIFIER")," represents (optional) build metadata, e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"git8c01382"),".")),(0,i.kt)("p",null,"When a backwards incompatible release is made, the ",(0,i.kt)("inlineCode",{parentName:"p"},"MAJOR")," version should be\nbumped."),(0,i.kt)("p",null,"When a regularly scheduled release is made, the ",(0,i.kt)("inlineCode",{parentName:"p"},"MINOR")," version should be\nbumped."),(0,i.kt)("p",null,"If there are fixes and (backwards compatible) changes that we want to back-port\nfrom an upcoming release, then the ",(0,i.kt)("inlineCode",{parentName:"p"},"PATCH")," version should be bumped."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"MODIFIER")," should be used to denote a build from an untagged (and\npotentially unclean) git source. It should be of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"gitCOMMIT_SHA[+dirty]\n")),(0,i.kt)("p",null,"where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"COMMIT_SHA")," represents the current commit\u2019s abbreviated SHA.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"+dirty")," part is optional and is only present if there are uncommitted\nchanges in the working directory."))}d.isMDXComponent=!0}}]);